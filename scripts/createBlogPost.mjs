#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import readline from 'readline';
import { execSync } from 'child_process';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const question = (query) =>
  new Promise((resolve) => rl.question(query, resolve));

const templates = {
  default: {
    name: 'Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏',
    description: 'Calculator Ïä§ÌÉÄÏùºÏùò Íµ¨Ï°∞ÌôîÎêú Î∏îÎ°úÍ∑∏ Í∏Ä',
  },
};

function createSlug(title) {
  return title
    .toLowerCase()
    .replace(/[^a-z0-9Í∞Ä-Ìû£\s-]/g, '')
    .replace(/\s+/g, ' ')
    .trim()
    .split(' ')
    .map((word, index) =>
      index === 0 ? word : word.charAt(0).toUpperCase() + word.slice(1)
    )
    .join('');
}

function formatDate(date) {
  return date.toISOString().split('T')[0];
}

function createPageTsx(title, summary, slug) {
  const componentName = slug.charAt(0).toUpperCase() + slug.slice(1);

  return `'use client';

import { metadata } from './meta';
import BlogPostLayout from '@/components/BlogPostLayout';
import ${componentName}Content from './content.mdx';
import { postsMeta } from '@/components/postsMeta';

function MDXContentWithProvider() {
  return <${componentName}Content />;
}

export default function ${componentName}Page() {
  const currentPath = '/mdx/${slug}';
  const idx = postsMeta.findIndex((p) => p.path === currentPath);
  const prevPost = idx > 0 ? postsMeta[idx - 1] : undefined;
  const nextPost = idx < postsMeta.length - 1 ? postsMeta[idx + 1] : undefined;
  return (
    <BlogPostLayout {...metadata} prevPost={prevPost} nextPost={nextPost}>
      <MDXContentWithProvider />
    </BlogPostLayout>
  );
}
`;
}

function createMetaTs(title, summary, tags, slug, category) {
  const tagsArray = tags
    .split(',')
    .map((tag) => `'${tag.trim()}'`)
    .join(', ');

  return `export const metadata = {
  title: '${title}',
  summary:
    '${summary}',
  date: '${formatDate(new Date())}',
  tags: [${tagsArray}],
  category: '${category}',
  thumbnail:
    '/file.svg',
};
`;
}

function createContentMdx(templateType, title, summary) {
  return `
## Í∏∞Î≥∏ Í∞úÎÖê Ïù¥Ìï¥ÌïòÍ∏∞

Î®ºÏ†Ä ÌïµÏã¨ Í∞úÎÖêÎ∂ÄÌÑ∞ Ïù¥Ìï¥Ìï¥Î≥¥Í≤†ÏäµÎãàÎã§.

### Ï£ºÏöî Íµ¨ÏÑ± ÏöîÏÜå

Ïù¥ ÏãúÏä§ÌÖúÏùò Ï£ºÏöî Íµ¨ÏÑ± ÏöîÏÜåÎì§:

- **ÏöîÏÜå 1**: ÏÑ§Î™Ö
- **ÏöîÏÜå 2**: ÏÑ§Î™Ö
- **ÏöîÏÜå 3**: ÏÑ§Î™Ö

### ÎèôÏûë ÏõêÎ¶¨

Í∏∞Î≥∏Ï†ÅÏù∏ ÎèôÏûë ÏõêÎ¶¨Î•º Îã®Í≥ÑÎ≥ÑÎ°ú ÏÇ¥Ìé¥Î≥¥Î©¥:

1. **Îã®Í≥Ñ 1**: Ï≤´ Î≤àÏß∏ Í≥ºÏ†ï
2. **Îã®Í≥Ñ 2**: Îëê Î≤àÏß∏ Í≥ºÏ†ï
3. **Îã®Í≥Ñ 3**: ÏÑ∏ Î≤àÏß∏ Í≥ºÏ†ï

---

## Ïã§Ï†ú ÎèôÏûë ÏÇ¥Ìé¥Î≥¥Í∏∞

Ïù¥Ï†ú Ïã§Ï†úÎ°ú Ïñ¥ÎñªÍ≤å ÎèôÏûëÌïòÎäîÏßÄ ÌôïÏù∏Ìï¥Î≥¥Í≤†ÏäµÎãàÎã§.

### ÏòàÏãú 1: Í∏∞Î≥∏ ÏÇ¨Î°Ä

Í∞ÑÎã®Ìïú ÏòàÏãúÎ•º ÌÜµÌï¥ Ïù¥Ìï¥Ìï¥Î≥¥Í≤†ÏäµÎãàÎã§.

\`\`\`
ÏòàÏãú ÏΩîÎìú ÎòêÎäî ÏÑ§Î™Ö
\`\`\`

### ÏòàÏãú 2: Î≥µÏû°Ìïú ÏÇ¨Î°Ä

Ï¢Ä Îçî Î≥µÏû°Ìïú ÏÉÅÌô©ÏóêÏÑúÎäî Ïñ¥ÎñªÍ≤å ÎèôÏûëÌï†ÍπåÏöî?

> üí° **ÌåÅ**: Ïó¨Í∏∞Ïóê Ï§ëÏöîÌïú Ìè¨Ïù∏Ìä∏ÎÇò Ï£ºÏùòÏÇ¨Ìï≠ÏùÑ ÏûëÏÑ±ÌïòÏÑ∏Ïöî.

---

## Ïã¨Ìôî ÎÇ¥Ïö©

### ÎÇ¥Î∂Ä Íµ¨Ï°∞ Î∂ÑÏÑù

ÏãúÏä§ÌÖúÏùò ÎÇ¥Î∂Ä Íµ¨Ï°∞Î•º ÏûêÏÑ∏Ìûà Î∂ÑÏÑùÌï¥Î≥¥Í≤†ÏäµÎãàÎã§.

#### Íµ¨Ï°∞Ï†Å ÌäπÏßï

- ÌäπÏßï 1Ïóê ÎåÄÌïú ÏÑ§Î™Ö
- ÌäπÏßï 2Ïóê ÎåÄÌïú ÏÑ§Î™Ö

#### ÏÑ±Îä•Í≥º Ìö®Ïú®ÏÑ±

ÏÑ±Îä• Ï∏°Î©¥ÏóêÏÑú Í≥†Î†§Ìï¥Ïïº Ìï† ÏÇ¨Ìï≠Îì§:

| Ìï≠Î™© | ÏÑ§Î™Ö | ÎπÑÍ≥† |
|------|------|------|
| Ìï≠Î™©1 | ÏÑ§Î™Ö1 | ÎπÑÍ≥†1 |
| Ìï≠Î™©2 | ÏÑ§Î™Ö2 | ÎπÑÍ≥†2 |

---

## ÎßàÎ¨¥Î¶¨

Ï†ïÎ¶¨ÌïòÏûêÎ©¥,

> Îã®ÏàúÌï¥ Î≥¥Ïù¥Îäî Í≤ÉÎèÑ ÎÇ¥Î∂ÄÎ•º Îì§Ïó¨Îã§Î≥¥Î©¥ Ï†ïÍµêÌïú Íµ¨Ï°∞Î•º Í∞ÄÏßÄÍ≥† ÏûàÎã§.

ÌïµÏã¨ Ìè¨Ïù∏Ìä∏Îì§:

- Ìè¨Ïù∏Ìä∏ 1
- Ìè¨Ïù∏Ìä∏ 2  
- Ìè¨Ïù∏Ìä∏ 3
`;
}

function updateBlogHome(slug, category, title) {
  const blogHomePath = path.join('src', 'components', 'BlogHome.tsx');
  let content = fs.readFileSync(blogHomePath, 'utf8');

  // slugÍ∞Ä Ïù¥ÎØ∏ camelCaseÏù¥ÎØÄÎ°ú Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
  const camelCaseSlug = slug;

  // 1. import Î¨∏ Ï∂îÍ∞Ä
  const importPattern =
    /(import { metadata as calculatorMeta } from '@\/app\/mdx\/calculator\/meta';)/;
  const newImport = `import { metadata as ${camelCaseSlug}Meta } from '@/app/mdx/${slug}/meta';`;

  if (!content.includes(newImport)) {
    content = content.replace(importPattern, `$1\n${newImport}`);
  }

  // 2. Ïπ¥ÌÖåÍ≥†Î¶¨Ïóê Ìè¨Ïä§Ìä∏ Ï∂îÍ∞Ä
  const categoryLower = category.toLowerCase();
  let categoryPattern;

  if (categoryLower === 'cs') {
    categoryPattern =
      /(id: 'cs',\s*name: 'CS',\s*icon: 'üìÅ',\s*posts: \[[\s\S]*?)(],\s*},)/;
  } else if (categoryLower === 'backend') {
    categoryPattern =
      /(id: 'backend',\s*name: 'Backend',\s*icon: 'üìÅ',\s*posts: \[[\s\S]*?)(],\s*},)/;
  } else if (categoryLower === 'java') {
    categoryPattern =
      /(id: 'java',\s*name: 'Java',\s*icon: 'üìÅ',\s*posts: \[)(],\s*},)/;
  } else if (categoryLower === 'go') {
    categoryPattern =
      /(id: 'go',\s*name: 'Go',\s*icon: 'üìÅ',\s*posts: \[)(],\s*},)/;
  }

  const newPost = `      {
        ...${camelCaseSlug}Meta,
        path: '/mdx/${slug}',
        category: '${category}',
      },`;

  if (categoryPattern && content.match(categoryPattern)) {
    content = content.replace(categoryPattern, (match, start, end) => {
      if (!match.includes(`${camelCaseSlug}Meta`)) {
        // Îπà Î∞∞Ïó¥Ïù∏ Í≤ΩÏö∞ÏôÄ Í∏∞Ï°¥ Ìè¨Ïä§Ìä∏Í∞Ä ÏûàÎäî Í≤ΩÏö∞Î•º Íµ¨Î∂Ñ
        if (end === '],\n    },') {
          return `${start}\n${newPost}\n    ${end}`;
        } else {
          return `${start}\n${newPost}${end}`;
        }
      }
      return match;
    });
  }

  fs.writeFileSync(blogHomePath, content);
  console.log('‚úÖ BlogHome.tsxÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§!');
}

function updatePostsMeta(slug, category, title, summary, tags) {
  const postsMetaPath = path.join('src', 'components', 'postsMeta.ts');
  let content = fs.readFileSync(postsMetaPath, 'utf8');

  const tagsArray = tags
    .split(',')
    .map((tag) => `'${tag.trim()}'`)
    .join(', ');

  const newPost = `  {
    title: '${title}',
    path: '/mdx/${slug}',
    date: '${formatDate(new Date())}',
    summary: '${summary}',
    tags: [${tagsArray}],
    category: '${category}',
    thumbnail: '/file.svg',
  },`;

  // Î∞∞Ïó¥Ïùò ÎßàÏßÄÎßâ Ìï≠Î™© Îí§Ïóê ÏÉà Ìè¨Ïä§Ìä∏ Ï∂îÍ∞Ä
  const insertPattern = /(  },\s*\];)(\s*)$/;
  content = content.replace(insertPattern, `  },\n${newPost}\n];$2`);

  fs.writeFileSync(postsMetaPath, content);
  console.log('‚úÖ postsMeta.tsÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§!');
}

async function main() {
  console.log('üöÄ ÏÉàÎ°úÏö¥ Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ ÏÉùÏÑ±Í∏∞\n');

  // 1. Í∏∞Î≥∏ Ï†ïÎ≥¥ ÏàòÏßë
  const title = await question('üìù Í∏Ä Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî: ');
  const summary = await question('üìã Í∏Ä ÏöîÏïΩÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî (1-2Ï§Ñ): ');
  const tags = await question('üè∑Ô∏è  ÌÉúÍ∑∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (ÏâºÌëúÎ°ú Íµ¨Î∂Ñ): ');

  // 2. Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù
  const categories = ['CS', 'Backend', 'Java', 'Go'];
  console.log('\nüìÇ Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:');
  categories.forEach((cat, index) => {
    console.log(`${index + 1}. ${cat}`);
  });

  const categoryChoice = await question('\nÏÑ†ÌÉù (1-4): ');
  const selectedCategory = categories[parseInt(categoryChoice) - 1] || 'CS';

  // 3. Í∏∞Î≥∏ ÌÖúÌîåÎ¶ø ÏÇ¨Ïö©
  const selectedTemplate = 'default';

  // 4. Git Î∏åÎûúÏπò ÏÉùÏÑ± Ïó¨Î∂Ä
  const createBranch = await question(
    '\nüåø ÏÉà Git Î∏åÎûúÏπòÎ•º ÏÉùÏÑ±ÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/n): '
  );

  const slug = createSlug(title);
  const basePath = path.join('src', 'app', 'mdx', slug);

  // 5. ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏
  if (fs.existsSync(basePath)) {
    console.error(`‚ùå Ïù¥ÎØ∏ Í∞ôÏùÄ Ïù¥Î¶ÑÏùò Í∏ÄÏù¥ Ï°¥Ïû¨Ìï©ÎãàÎã§: ${slug}`);
    rl.close();
    process.exit(1);
  }

  // 6. Git Î∏åÎûúÏπò ÏÉùÏÑ±
  if (createBranch.toLowerCase() === 'y') {
    try {
      execSync(`git checkout -b feature/blog-${slug}`, { stdio: 'pipe' });
      console.log(`‚úÖ Git Î∏åÎûúÏπò ÏÉùÏÑ±Îê®: feature/blog-${slug}`);
    } catch (error) {
      console.log('‚ö†Ô∏è Git Î∏åÎûúÏπò ÏÉùÏÑ± Ïã§Ìå® (Í≥ÑÏÜç ÏßÑÌñâ)');
    }
  }

  // 7. ÎîîÎ†âÌÜ†Î¶¨ Î∞è ÌååÏùº ÏÉùÏÑ±
  fs.mkdirSync(basePath, { recursive: true });

  // ÌååÏùº ÏÉùÏÑ±
  fs.writeFileSync(
    path.join(basePath, 'page.tsx'),
    createPageTsx(title, summary, slug)
  );

  fs.writeFileSync(
    path.join(basePath, 'meta.ts'),
    createMetaTs(title, summary, tags, slug, selectedCategory)
  );

  fs.writeFileSync(
    path.join(basePath, 'content.mdx'),
    createContentMdx(selectedTemplate, title, summary)
  );

  // 8. BlogHome.tsx ÏóÖÎç∞Ïù¥Ìä∏
  console.log('\nüîÑ Î∏îÎ°úÍ∑∏ Ìôà ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë...');
  updateBlogHome(slug, selectedCategory, title);

  // 9. postsMeta.ts ÏóÖÎç∞Ïù¥Ìä∏
  console.log('üîÑ postsMeta.ts ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë...');
  updatePostsMeta(slug, selectedCategory, title, summary, tags);

  // 10. ÏôÑÎ£å Î©îÏãúÏßÄ
  console.log('\nüéâ Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å!');
  console.log(`üìÅ Í≤ΩÎ°ú: ${basePath}`);
  console.log(`üîó URL: /mdx/${slug}`);
  console.log(`üìÇ Ïπ¥ÌÖåÍ≥†Î¶¨: ${selectedCategory}`);

  if (createBranch.toLowerCase() === 'y') {
    console.log(`üåø Î∏åÎûúÏπò: feature/blog-${slug}`);
  }

  console.log('\nüìù Îã§Ïùå Îã®Í≥Ñ:');
  console.log(
    `1. ${path.join(basePath, 'content.mdx')} ÌååÏùºÏùÑ Ïó¥Ïñ¥ÏÑú Í∏ÄÏùÑ ÏûëÏÑ±ÌïòÏÑ∏Ïöî`
  );
  console.log(
    `2. ÌïÑÏöîÏãú ${path.join(basePath, 'meta.ts')}ÏóêÏÑú Î©îÌÉÄÎç∞Ïù¥ÌÑ∞Î•º ÏàòÏ†ïÌïòÏÑ∏Ïöî`
  );
  console.log('3. ÏûëÏÑ± ÏôÑÎ£å ÌõÑ Ïª§Î∞ãÌïòÍ≥† Î∞∞Ìè¨ÌïòÏÑ∏Ïöî');
  console.log('\nüí° Î∏îÎ°úÍ∑∏ ÌôàÌéòÏù¥ÏßÄÏóê ÏûêÎèôÏúºÎ°ú Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!');

  rl.close();
}

main().catch((error) => {
  console.error('‚ùå Ïò§Î•ò Î∞úÏÉù:', error);
  rl.close();
  process.exit(1);
});
